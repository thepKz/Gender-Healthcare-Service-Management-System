openapi: 3.0.0
info:
  title: Gender Healthcare API
  description: API documentation for Gender Healthcare application
  version: 1.0.0

servers:
  - url: ${API_URL}
    description: Current environment

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
          description: 8-30 ký tự, chỉ chứa chữ, số và dấu gạch dưới
        email:
          type: string
          format: email
        passwordHash:
          type: string
          description: Mật khẩu đã được mã hóa
        role:
          type: string
          enum: [admin, user, guest]
        fullName:
          type: string
        phone:
          type: string
        avatar:
          type: string
        address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            zipCode:
              type: string
            country:
              type: string
        isDisabled:
          type: boolean
          
    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
        stock:
          type: integer
        categoryId:
          type: string
        variants:
          type: array
          items:
            type: object
            properties:
              color:
                type: string
              size:
                type: string
              stock:
                type: integer
              imageUrl:
                type: string
        isFeatured:
          type: boolean
        rating:
          type: number
        reviewCount:
          type: integer
    
    Order:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              productId:
                type: string
              quantity:
                type: integer
              price:
                type: number
        totalAmount:
          type: number
        status:
          type: string
          enum: [pending, shipped, delivered, cancelled]
        shippingAddress:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            zipCode:
              type: string
            country:
              type: string
        paymentId:
          type: string

    Review:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        productId:
          type: string
        rating:
          type: number
        comment:
          type: string
        createdAt:
          type: string
          format: date-time

tags:
  - name: Auth
    description: Authentication endpoints
  - name: Users
    description: User management endpoints
  - name: Products
    description: Product management endpoints
  - name: Orders
    description: Order management endpoints
  - name: Reviews
    description: Review management endpoints

paths:
  /api/auth/register:
    post:
      tags:
        - Auth
      summary: Register new user
      description: |
        Register a new user with the following rules:
        - Username: 8-30 ký tự, chỉ chứa chữ, số và dấu gạch dưới
        - Email: Phải đúng định dạng email
        - Password: Phải có chữ hoa, chữ thường, số, ký tự đặc biệt, 6-30 ký tự
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  example: "user123"
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "Test@123"
                phone:
                  type: string
                  example: "0903123456"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Đăng ký thành công!"
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      isVerified:
                        type: boolean
                      token:
                        type: string
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  password:
                    type: string
  
  /api/auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "Test@123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Đăng nhập thành công!"
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      isVerified:
                        type: boolean
                      token:
                        type: string
                      avatar:
                        type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Thông tin đăng nhập không chính xác"

  /api/users:
    get:
      tags:
        - Users
      summary: Get user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                      username:
                        type: string
                      phone:
                        type: string
                      avatar:
                        type: string
                      address:
                        type: object
                      role:
                        type: string
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /api/users/all:
    get:
      tags:
        - Users
      summary: Get all users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        username:
                          type: string
                        email:
                          type: string
                        avatar:
                          type: string
                        phone:
                          type: string
                        role:
                          type: string
                        isDisabled:
                          type: boolean
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /api/users/search:
    get:
      tags:
        - Users
      summary: Search users
      security:
        - BearerAuth: []
      parameters:
        - name: q
          in: query
          description: Search query (username, email, phone)
          schema:
            type: string
        - name: role
          in: query
          description: Filter by role (admin, user, staff)
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order (asc or desc)
          schema:
            type: string
            default: desc
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  filters:
                    type: object
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      totalPages:
                        type: integer
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/users/update-profile:
    patch:
      tags:
        - Users
      summary: Update user profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                phone:
                  type: string
                avatar:
                  type: string
                address:
                  type: object
      responses:
        '200':
          description: Profile updated successfully
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/users/toggle-status/{userId}:
    patch:
      tags:
        - Users
      summary: Toggle user active status
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User status toggled successfully
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error

  /api/users/change-password:
    patch:
      tags:
        - Users
      summary: Change user password
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - newPassword
              properties:
                password:
                  type: string
                  description: Current password
                newPassword:
                  type: string
                  description: New password
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Invalid current password
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/users/forgot-password:
    post:
      tags:
        - Users
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Reset token sent successfully
        '404':
          description: Email not found
        '500':
          description: Server error

  /api/users/reset-password:
    post:
      tags:
        - Users
      summary: Reset password with token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - token
                - newPassword
              properties:
                email:
                  type: string
                  format: email
                token:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password reset successfully
        '400':
          description: Invalid or expired token
        '500':
          description: Server error

  /api/products:
    get:
      tags:
        - Products
      summary: Get all products
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 10
        - name: categoryId
          in: query
          description: Filter by category ID
          schema:
            type: string
      responses:
        '200':
          description: List of products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      totalPages:
                        type: integer
        '500':
          description: Server error
    post:
      tags:
        - Products
      summary: Create new product
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - categoryId
                - price
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: integer
                categoryId:
                  type: string
                variants:
                  type: array
                  items:
                    type: object
                isFeatured:
                  type: boolean
      responses:
        '201':
          description: Product created successfully
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/products/search:
    get:
      tags:
        - Products
      summary: Search products
      parameters:
        - name: q
          in: query
          description: Search query
          schema:
            type: string
        - name: categoryId
          in: query
          description: Filter by category ID
          schema:
            type: string
        - name: minPrice
          in: query
          description: Minimum price
          schema:
            type: number
        - name: maxPrice
          in: query
          description: Maximum price
          schema:
            type: number
        - name: minRating
          in: query
          description: Minimum rating
          schema:
            type: number
        - name: color
          in: query
          description: Filter by color
          schema:
            type: string
        - name: featured
          in: query
          description: Filter by featured status
          schema:
            type: boolean
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Field to sort by (price_asc, price_desc, rating, popularity, newest)
          schema:
            type: string
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order (asc or desc)
          schema:
            type: string
            default: desc
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  filters:
                    type: object
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      totalPages:
                        type: integer
        '500':
          description: Server error

  /api/products/featured:
    get:
      tags:
        - Products
      summary: Get featured products
      responses:
        '200':
          description: Featured products retrieved successfully
        '500':
          description: Server error

  /api/products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product retrieved successfully
        '404':
          description: Product not found
        '500':
          description: Server error
    put:
      tags:
        - Products
      summary: Update product
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: integer
                categoryId:
                  type: string
                variants:
                  type: array
                  items:
                    type: object
                isFeatured:
                  type: boolean
      responses:
        '200':
          description: Product updated successfully
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '404':
          description: Product not found
        '500':
          description: Server error
    delete:
      tags:
        - Products
      summary: Delete product
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Product not found
        '500':
          description: Server error

  /api/orders:
    get:
      tags:
        - Orders
      summary: Get all orders (admin)
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [pending, shipped, delivered, cancelled]
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      totalPages:
                        type: integer
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/orders/search:
    get:
      tags:
        - Orders
      summary: Search orders
      security:
        - BearerAuth: []
      parameters:
        - name: orderId
          in: query
          description: Order ID
          schema:
            type: string
        - name: userId
          in: query
          description: User ID
          schema:
            type: string
        - name: status
          in: query
          description: Order status
          schema:
            type: string
            enum: [pending, shipped, delivered, cancelled]
        - name: minAmount
          in: query
          description: Minimum order amount
          schema:
            type: number
        - name: maxAmount
          in: query
          description: Maximum order amount
          schema:
            type: number
        - name: startDate
          in: query
          description: Start date
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date
          schema:
            type: string
            format: date
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order (asc or desc)
          schema:
            type: string
            default: desc
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  filters:
                    type: object
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      totalPages:
                        type: integer
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/orders/user/{userId}:
    get:
      tags:
        - Orders
      summary: Get orders by user ID
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of user orders retrieved successfully
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error
    post:
      tags:
        - Orders
      summary: Create new order
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
                - shippingAddress
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                      quantity:
                        type: integer
                shippingAddress:
                  type: object
                  properties:
                    street:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    zipCode:
                      type: string
                    country:
                      type: string
                paymentMethod:
                  type: string
                  enum: [cash, creditCard, paypal]
      responses:
        '201':
          description: Order created successfully
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error

  /api/orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order retrieved successfully
        '401':
          description: Unauthorized
        '404':
          description: Order not found
        '500':
          description: Server error

  /api/orders/{id}/status:
    put:
      tags:
        - Orders
      summary: Update order status
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, shipped, delivered, cancelled]
      responses:
        '200':
          description: Order status updated successfully
        '400':
          description: Invalid status
        '401':
          description: Unauthorized
        '404':
          description: Order not found
        '500':
          description: Server error

  /api/reviews/product/{productId}:
    get:
      tags:
        - Reviews
      summary: Get reviews by product ID
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of product reviews retrieved successfully
        '404':
          description: Product not found
        '500':
          description: Server error

  /api/reviews/user/{userId}:
    get:
      tags:
        - Reviews
      summary: Get reviews by user ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of user reviews retrieved successfully
        '404':
          description: User not found
        '500':
          description: Server error

  /api/reviews/search:
    get:
      tags:
        - Reviews
      summary: Search reviews
      parameters:
        - name: productId
          in: query
          description: Product ID
          schema:
            type: string
        - name: userId
          in: query
          description: User ID
          schema:
            type: string
        - name: minRating
          in: query
          description: Minimum rating
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: maxRating
          in: query
          description: Maximum rating
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: keyword
          in: query
          description: Search keyword in comment
          schema:
            type: string
        - name: startDate
          in: query
          description: Start date
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date
          schema:
            type: string
            format: date
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order (asc or desc)
          schema:
            type: string
            default: desc
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
                  filters:
                    type: object
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      totalPages:
                        type: integer
        '500':
          description: Server error

  /api/reviews:
    post:
      tags:
        - Reviews
      summary: Create new review
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - productId
                - rating
              properties:
                userId:
                  type: string
                productId:
                  type: string
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
      responses:
        '201':
          description: Review created successfully
        '400':
          description: Invalid input or user already reviewed this product
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/reviews/{id}:
    put:
      tags:
        - Reviews
      summary: Update review
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
      responses:
        '200':
          description: Review updated successfully
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '404':
          description: Review not found
        '500':
          description: Server error
    delete:
      tags:
        - Reviews
      summary: Delete review
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Review deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Review not found
        '500':
          description: Server error 